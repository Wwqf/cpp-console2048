1. 玩法
    使用↑, ↓, ←, →移动.
2. 设计
    1). 布局4×4, 开局任意位置出现2或4.
    2). 出现2的概率随着游戏深入而减小, 而出现4的概率随着游戏深入而增大.(有上界)
3. 分析
    游戏状态: 游戏开始, 游戏结束, 游戏暂停
    存储游戏数值: 当前棋盘中棋子的位置以及值, 总分, 当前得分.
    输入输出: 使用curses库

    实体: 棋子与棋盘 分数
    文件操作类, dao层, 数据类 // 完成
    [文件操作存储总分与当前分值为一项, 存储游戏数据为一项]
    一些帮助类 // 完成

// 游戏默认状态为暂停(准备), 暂停状态游戏控件不可用
// 进入游戏时, 提示用户是否读取上次游戏进度(如果上次有保存) // 那么需要存储是否保存的信息
// 如果选择是, 则读取上次游戏进度(从ches_direc, sc_direc)
// 如果不是, 则重新开局, 并读取最高分, 设置游戏状态为start
// 在游戏过程中, 用户按esc键, 选择是否退出, 设置游戏状态为pause
// 如果选择是, 提示用户是否存储游戏进度
// 如果不存储则游戏退出, 设置状态为over


// 需要准备的变量:
    // 终端的宽度, 高度
    // 棋盘的宽度, 高度为固定值
    // 棋盘离终端的距离(宽度) = (终端的宽度 - 棋盘的宽度 - box的宽度) / 2;
    // 棋盘离终端的距离(高度) = (终端的高度 - 棋盘的高度 - box的宽度 - 字体高度) / 2;
    // 单行字体高度为一, 需要显示最高得分与当前得分, 则为两行. 与棋盘间隔一行, 则字体高度为三行.
    // 初始化得分字符, 提示字符, 得分

// 游戏结束条件: 
    方格中都填满了数， 用户选择退出

// 在GameView.cpp中, 监听键盘事件处, 有移植性问题.
// 使用curses getch() 有时正常, 有时不正常. 如果读入有问题, 注释c = getch(); c = getch(); 这一行即可.

// 权责分配不清楚, 代码混乱
// 又是到后期, 逻辑混乱不清



实体单元:
Chess 棋子类
Chessboard 棋盘类
ScoreFonts 分数类
TipFonts 提示类

主单元: 
GameScreenData 游戏数据类
GameView 游戏类

工具单元:
Point 坐标类
Random 随机数类
Utils 工具类

入口:
main.cpp